import sys

sys.setrecursionlimit(10**6)
def find(L):
    k=[]
    if L[0]-1>=0 and L[1]-1>=0 and M[L[0]-1][L[1]-1]:
        k.append([L[0]-1,L[1]-1])    
    if L[0]-1>=0 and M[L[0]-1][L[1]]:
        k.append([L[0]-1,L[1]])    
    if L[0]-1>=0 and L[1]+1<=w-1 and M[L[0]-1][L[1]+1]:
        k.append([L[0]-1,L[1]+1])
    if L[1]-1>=0 and M[L[0]][L[1]-1]:
        k.append([L[0],L[1]-1])
    if L[1]+1<=w-1 and M[L[0]][L[1]+1]:
        k.append([L[0],L[1]+1])
    if L[0]+1<=h-1 and L[1]-1>=0 and M[L[0]+1][L[1]-1]:
        k.append([L[0]+1,L[1]-1])
    if L[0]+1<=h-1 and M[L[0]+1][L[1]]:
        k.append([L[0]+1,L[1]])
    if L[0]+1<=h-1 and L[1]+1<=w-1 and M[L[0]+1][L[1]+1]:
        k.append([L[0]+1,L[1]+1])
    return k
    

def bfs(L):
    if L:
        L1=[]
        for i in L:
            if not visit[i[0]][i[1]]:
                visit[i[0]][i[1]]=number
                L1+=(find(i))
        bfs(L1)
            
            
    
    

while True:
    w,h=map(int,input().split())
    number=1
    if w == 0 and h ==0 :
        break   
    visit=[[0 for i in range(w)] for i in range(h)]
    M=[]
    for i in range(h):
        M.append(list(map(int,input().split())))
    for i in range(h):
        for j in range(w):
            if M[i][j] and not visit[i][j]:
                bfs([[i,j]])
                number+=1
                
    print(number-1)
    
    
    #ë¬¸ì œ https://www.acmicpc.net/submit/4963
